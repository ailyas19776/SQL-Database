CREATE TABLE USERS(
        USER_ID INTEGER PRIMARY KEY,
        FIRST_NAME VARCHAR2(100) NOT NULL,
        LAST_NAME varchar2(100) NOT NULL,
        YEAR_OF_BIRTH INTEGER,
        MONTH_OF_BIRTH INTEGER,
        DAY_OF_BIRTH INTEGER,
        GENDER VARCHAR2(100)
);

CREATE TABLE FRIENDS(
        USER1_ID INTEGER NOT NULL,
        USER2_ID INTEGER NOT NULL,
        PRIMARY KEY (USER1_ID, USER2_ID)
);

CREATE TRIGGER order_friends_pairs
BEFORE INSERT ON FRIENDS
FOR EACH ROW
DECLARE temp NUMBER;
BEGIN
IF :NEW.USER1_ID > :NEW.USER2_ID THEN
temp := :NEW.USER2_ID;
:NEW.USER2_ID := :NEW.USER1_ID;
:NEW.USER1_ID := temp;
END IF ;
END;
/



CREATE TABLE CITIES(
        CITY_ID INTEGER PRIMARY KEY,
        CITY_NAME VARCHAR2(100) NOT NULL,
        STATE_NAME varchar2(100) NOT NULL,
        COUNTRY_NAME varchar2(100) NOT NULL
        /*UNIQUE (CITY_NAME, STATE_NAME, COUNTRY_NAME)*/
);

/* USE DISTINCT FOR COMBINATION */
CREATE TABLE USER_CURRENT_CITIES( 
        USER_ID NUMBER PRIMARY KEY,
        CURRENT_CITY_ID INTEGER NOT NULL
);

CREATE TABLE USER_HOMETOWN_CITIES(
        USER_ID NUMBER PRIMARY KEY,
        HOMETOWN_CITY_ID INTEGER NOT NULL
);

CREATE TABLE MESSAGES(
        MESSAGE_ID NUMBER,
        SENDER_ID NUMBER,
        RECEIVER_ID NUMBER,
        MESSAGE_CONTENT VARCHAR2(2000) NOT NULL,
        SENT_TIME TIMESTAMP NOT NULL,
	PRIMARY KEY (MESSAGE_ID, SENDER_ID, RECEIVER_ID)
);

CREATE TABLE PROGRAMS(
        PROGRAM_ID INTEGER PRIMARY KEY,
        INSTITUTION VARCHAR2(100) NOT NULL,
        CONCENTRATION VARCHAR2(100) NOT NULL,
        DEGREE VARCHAR2(100) NOT NULL
);

CREATE TABLE EDUCATION(
        USER_ID NUMBER,
        PROGRAM_ID INTEGER,
        PROGRAM_YEAR INTEGER NOT NULL,
	PRIMARY KEY (USER_ID, PROGRAM_ID)
);

CREATE TABLE USER_EVENTS(
        EVENT_ID NUMBER PRIMARY KEY,
        EVENT_CREATOR_ID NUMBER NOT NULL,
        EVENT_NAME VARCHAR2(100) NOT NULL,
        EVENT_TAGLINE VARCHAR2(100),
        EVENT_DESCRIPTION VARCHAR2(100),
        EVENT_HOST VARCHAR2(100),
        EVENT_TYPE VARCHAR2(100),
        EVENT_SUBTYPE VARCHAR2(100),
        EVENT_ADDRESS VARCHAR2(2000),
        EVENT_CITY_ID INTEGER NOT NULL,
        EVENT_START_TIME TIMESTAMP,
        EVENT_END_TIME TIMESTAMP
);

CREATE TABLE PARTICIPANTS(
        EVENT_ID NUMBER FOREIGN KEY REFERENCES USER_EVENTS,
        USER_ID NUMBER FOREIGN KEY REFERENCES USERS,
        CONFIRMATION VARCHAR2(100) NOT NULL  CHECK (CONFIRMATION == "ATTENDING" OR CONFIRMATION == "UNSURE" OR CONFIRMATION == "DECLINES" OR CONFIRMATION == "NOT_REPLIED"),

);

CREATE TABLE ALBUMS(
        ALBUM_ID INTEGER PRIMARY KEY,
        ALBUM_OWNER_ID NUMBER NOT NULL,
        ALBUM_NAME VARCHAR2(100),
        ALBUM_CREATED_TIME TIMESTAMP NOT NULL,
        ALBUM_MODIFIED_TIME TIMESTAMP,
        ALBUM_LINK VARCHAR2(100) NOT NULL,
        ALBUM_VISIBILITY VARCHAR2(100) NOT NULL CHECK (ALBUM_VISIBILITY == "EVERYONE" OR  ALBUM_VISIBILITY ==  "FRIENDS" OR  ALBUM_VISIBILITY == "FRIENDS_OF_FRIENDS" OR  ALBUM_VISIBILITY == "MYSELF"),
        COVER_PHOTO_ID NUMBER NOT NULL
);

CREATE TABLE PHOTOS(
        PHOTO_ID NUMBER PRIMARY KEY,
        ALBUM_ID NUMBER NOT NULL,
        PHOTO_CAPTAIN VARCHAR2(2000),
        PHOTO_CREATED_TIME TIMESTAMP NOT NULL,
        PHOTO_MODIFIED_TIME TIMESTAMP,
        PHOTO_LINK VARCHAR2(2000) NOT NULL
);

CREATE TABLE TAG(
        TAG_PHOTO_ID NUMBER,
        TAG_SUBJECT_ID NUMBER,
        TAG_CREATED_TIME TIMESTAMP NOT NULL,
        TAG_X NUMBER NOT NULL,
        TAG_Y NUMBER NOT NULL,
        PRIMARY KEY(TAG_PHOTO_ID, TAG_SUBJECT_ID)
);
